// Time Complexity :O(log(n))
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No


// Your code here along with comments explaining your approach
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix==null)
        {
            return false;
        }
        int m = matrix.length, n = matrix[0].length;  //number of rows and columns in matrix
        int start = 0, end = m*n-1;  // initialize start and end variables
        
        // Binary Search implementation
        while(start <= end) 
        {
            int mid = start+(end-start)/2;  //get the mid value 
            int i = mid/n;    //to get the row index
            int j = mid%n;    //to get the column index
            if(matrix[i][j]==target)   //if the target element is found at the  current index return true
            {
                return true;
            }
            else if(matrix[i][j] < target) //if the target element is greater that the current index then update the start to mid+1
            {
                start = mid+1;
            }
            else
            {
                end = mid-1;
            }
        }
        return false;
    }
}